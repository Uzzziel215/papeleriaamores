"use client";

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { ShoppingCart, Heart, Star } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useRouter } from 'next/navigation'; // Importar useRouter
// Importar la instancia de Supabase directamente para usar auth methods
import { supabase } from '@/lib/supabase';

// Importar el hook useToast de shadcn/ui
import { useToast } from "@/components/ui/use-toast";

// Importar el CartContext
import { useCart } from '@/contexts/CartContext';

// Definir interfaces para la estructura de datos que este componente espera recibir como props
interface ProductImage {
  id: string;
  url: string;
  alt_text?: string | null;
  es_principal: boolean;
}

interface ProductVariant {
  id: string;
  nombre: string;
  tipo: string;
  valor: string;
  codigo_sku?: string | null;
  precio_adicional?: number | null;
  stock: number;
  activo: boolean;
}

interface ProductReview {
    id: string;
    producto_id: string;
    usuario_id: string;
    titulo: string;
    contenido: string;
    valoracion: number; // Suponiendo que es un número (INTEGER en la BD)
    aprobado: boolean;
    created_at: string; // O Date
    updated_at: string; // O Date
    // perfiles_usuario?: { nombre: string | null; apellidos?: string | null; }; // Si unes con perfiles de usuario
}

interface ProductDetailProps {
  product: {
    id: string;
    nombre: string;
    descripcion?: string | null;
    descripcion_larga?: string | null;
    precio: number;
    precio_descuento?: number | null;
    porcentaje_descuento?: number | null;
    sku?: string | null;
    stock: number;
    marca?: string | null;
    destacado: boolean;
    nuevo: boolean;
    activo: boolean;
    created_at: string;
    updated_at: string;
    metadata?: any | null;
    categoria_id?: string | null;
    imagenes_producto: ProductImage[];
    variantes_producto: ProductVariant[];
    rating: number; // Valoración promedio
    is_favorited_by_user?: boolean; // Prop para saber si es favorito inicial
  };
  reviews: ProductReview[]; // Reseñas individuales
}

export function ProductDetailsClient({ product, reviews }: ProductDetailProps) {
   // Estados para gestionar la selección de variantes y cantidad
   const [selectedVariants, setSelectedVariants] = useState<Record<string, string>>({}); // { tipo: variantId }
   const [quantity, setQuantity] = useState<number>(1);
   const [mainImageUrl, setMainImageUrl] = useState<string>(product.imagenes_producto.find(img => img.es_principal)?.url || product.imagenes_producto[0]?.url || '/placeholder.jpg');
   // Estado local para favoritos (inicializado con la prop)
   const [isFavorited, setIsFavorited] = useState<boolean>(product.is_favorited_by_user || false);
   // Estado para manejar carga del botón de favoritos
   const [isTogglingFavorite, setIsTogglingFavorite] = useState(false);

   const router = useRouter(); // Inicializar useRouter
   const { toast } = useToast(); // Inicializar useToast

   // Estado y useEffect para obtener el usuario autenticado en el cliente
   const [user, setUser] = useState<any | null>(null); // Ajusta 'any' al tipo de usuario de Supabase si lo tienes
   const [isLoadingAuth, setIsLoadingAuth] = useState(true);

   // Usar el hook useCart
   const { addItem } = useCart();

   useEffect(() => {
       const getUser = async () => {
           setIsLoadingAuth(true);
           // Usar supabase.auth.getUser() para obtener el usuario autenticado
           const { data: { user } } = await supabase.auth.getUser();
           setUser(user);
           setIsLoadingAuth(false);

           // NOTA: La prop `is_favorited_by_user` ya se está pasando desde el Server Component (espero) 
           // si la lógica de carga en el server component está uniendo la tabla favoritos para el usuario actual.
           // Si no es así, necesitarías hacer una consulta adicional aquí para verificar el estado de favorito.
       };
       getUser();
   }, []); // Se ejecuta solo al montar el componente

   // Agrupar variantes por tipo (esto podría hacerse en el server component y pasarse)
   const variantsByType = product.variantes_producto.reduce((acc, variant) => {
     if (!acc[variant.tipo]) {
       acc[variant.tipo] = [];
     }
     acc[variant.tipo].push(variant);
     return acc;
   }, {} as Record<string, ProductVariant[]>);

   // Manejador de selección de variantes (ejemplo básico)
   const handleVariantSelect = (type: string, variantId: string) => {
      setSelectedVariants(prev => ({ ...prev, [type]: variantId }));
      // Lógica adicional aquí para actualizar precio, stock, etc. basado en la combinación de variantes seleccionadas
   };

    // Manejador de cambio de cantidad (ejemplo básico)
    const handleQuantityChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
        setQuantity(parseInt(event.target.value, 10));
    };

   // Manejador de añadir al carrito (se conectará con el CartContext)
   const handleAddToCart = async () => { // Make async to await addItem
       console.log('Add to cart clicked!', { product: product.id, variants: selectedVariants, quantity });

       // Determine the selected variant ID. If there are variants and one is selected, use it.
       // This assumes only one type of variant can be selected at a time, or you have a way
       // to get a single variant ID from the selected combination (e.g., a main variant type).
       // For simplicity, let's assume we take the first selected variant ID if any type has a selection.
       const selectedVariantId = Object.values(selectedVariants)[0] || null;

       // Use the addItem function from the CartContext
       await addItem(product.id, selectedVariantId, quantity);

        // Mostrar toast de éxito
        toast({
          title: "Producto Añadido",
          description: `${quantity} x ${product.nombre} ha(n) sido añadido(s) al carrito.`, // Mensaje mejorado
          variant: "default", // O "success" si tienes esa variante
        });
   };

   // Manejador de añadir a favoritos (LLAMADA A RPC toggle_favorite)
   const handleAddToFavorites = async () => {
       console.log('Add to favorites clicked!', { productId: product.id });

       // --- Check de Autenticación ---
       // Esperar a que termine la carga de auth si es necesario (aunque el botón estará disabled)
       if (isLoadingAuth) {
          console.log('Auth state loading...');
           return;
       }

       if (!user) {
           console.log('User not authenticated. Redirecting to login.');
            // Redirigir al usuario a la página de login y mostrar un toast informativo
            toast({
              title: "Inicia sesión para añadir a favoritos",
              description: "Serás redirigido a la página de inicio de sesión.",
              variant: "default", // O un variante de info/aviso
            });
           router.push('/login');
           return; // Detener la ejecución si no hay usuario
       }
       // -----------------------------

       // Si el usuario está autenticado, procede con la llamada a la RPC
       setIsTogglingFavorite(true); // Iniciar estado de carga del botón
       console.log('User authenticated. Calling toggle_favorite RPC...', { userId: user.id, productId: product.id });

       try {
         const { data: isNowFavorited, error } = await supabase.rpc('toggle_favorite', {
           product_id_input: product.id,
           user_id_input: user.id,
         });

         if (error) {
           console.error('Error calling toggle_favorite RPC:', error);
           // Revertir el estado local optimista si la llamada falló
           // setIsFavorited(!isFavorited); // Opcional si no quieres feedback instantáneo
           toast({
             title: "Error al actualizar favoritos",
             description: error.message || "No se pudo actualizar el estado de favoritos.",
             variant: "destructive",
           });
         } else {
            console.log('Favorite toggled successfully. New state:', isNowFavorited);
            // Actualizar el estado local basado en la respuesta de la RPC (TRUE/FALSE)
            setIsFavorited(isNowFavorited);

            // Mostrar toast de éxito basado en la respuesta
            toast({
              title: isNowFavorited ? "Añadido a Favoritos" : "Eliminado de Favoritos",
              description: isNowFavorited ? `${product.nombre} ha sido añadido a tus favoritos.` : `${product.nombre} ha sido eliminado de tus favoritos.`,
              variant: "default", // O "success" / "info"
            });
         }

       } catch (error: any) {
         console.error('Unexpected error toggling favorite:', error);
          // Revertir el estado local si hubo una excepción inesperada
          // setIsFavorited(!isFavorited); // Opcional
          toast({
             title: "Error Inesperado",
             description: error.message || "Ocurrió un error al procesar tu solicitud.",
             variant: "destructive",
           });
       } finally {
         setIsTogglingFavorite(false); // Finalizar estado de carga del botón
       }
   };

   // Determinar precio actual (considerando descuento y variantes si aplica)
   // NOTA: Lógica de precio por variantes no implementada completamente aquí. Requiere buscar la variante/combinación de variantes seleccionada.
   // Para un cálculo básico que incluya el precio adicional de la variante seleccionada (si solo se permite una selección de tipo):
   const selectedVariant = product.variantes_producto.find(v => v.id === Object.values(selectedVariants)[0]);
   const basePrice = product.precio_descuento ?? product.precio;
   const priceWithVariant = basePrice + (selectedVariant?.precio_adicional ?? 0);

   const discountPercentage = product.precio_descuento != null && product.precio != null && product.precio > 0
     ? Math.round(((product.precio - product.precio_descuento) / product.precio) * 100)
     : undefined;

    // Función para mostrar estrellas basado en un rating
    const renderStars = (rating: number) => {
      const fullStars = Math.floor(rating);
      const hasHalfStar = rating % 1 !== 0;
      const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

      const stars = [];
      for (let i = 0; i < fullStars; i++) {
          stars.push(<Star key={`full-${i}`} className="h-4 w-4 fill-current text-yellow-400" />);
      }
      if (hasHalfStar) {
           // Implementación más robusta de media estrella si es necesario, aquí solo icono completo con color
           // Una implementación ideal usaría un SVG personalizado o una librería.
           // Por ahora, usaremos un icono completo y dependeremos del color para simular.
           // O simplemente podemos no renderizar media estrella para simplificar aún más.
           // Simplificaremos y solo renderizaremos estrellas completas o vacías.
            // Si el rating es 4.5, renderizamos 4 estrellas llenas y 1 vacía.
            // Si el rating es 4.6, renderizamos 5 estrellas llenas.
            // Usemos un enfoque simple: redondeamos al entero más cercano para mostrar estrellas llenas.
            const roundedRating = Math.round(rating);
             stars.length = 0; // Clear previous stars
             for (let i = 0; i < roundedRating; i++) {
                 stars.push(<Star key={`rounded-full-${i}`} className="h-4 w-4 fill-current text-yellow-400" />);
             }
             for (let i = 0; i < (5 - roundedRating); i++) {
                 stars.push(<Star key={`rounded-empty-${i}`} className="h-4 w-4 text-gray-300" />);
             }

      } else {
           for (let i = 0; i < emptyStars; i++) {
               stars.push(<Star key={`empty-${i}`} className="h-4 w-4 text-gray-300" />);
           }
      }

      return (
        <div className="flex">
          {stars}
        </div>
      );
    }; // End of renderStars function definition


  return (

    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
      {/* Product Images */}
      {/* Este contenedor necesita 'relative' para que Image fill funcione */} 
      {product.imagenes_producto && product.imagenes_producto.length > 0 && (
         <div className="relative aspect-square rounded-lg overflow-hidden shadow-sm bg-white p-4">
           {/* Aquí podrías usar un carrusel/galería de imágenes */} 
           {/* De momento, solo la imagen principal o la primera disponible */} 
          <Image
            src={mainImageUrl}
            alt={product.nombre}
            fill
            className="object-contain"
          />
          {/* Miniaturas para navegar entre imágenes (opcional) */}
        </div>
      )}

      {/* Product Info */}
      <div>
        <h1 className="text-3xl font-bold mb-2">{product.nombre}</h1>

        {/* Rating Promedio */}
        <div className="flex items-center mb-4">
          {renderStars(product.rating)}
          {/* Mostrar rating con un decimal, incluso si es entero, para consistencia */}
          <span className="ml-2 text-gray-600">{product.rating.toFixed(1)}</span>
          {reviews && reviews.length > 0 && <span className="ml-2 text-sm text-gray-500">({reviews.length} reseñas)</span>}
        </div>

        {/* Price */}
        <div className="mb-4">
          {product.precio_descuento != null ? (
            <div className="flex items-center">
              <span className="text-2xl font-semibold text-[#0084cc]">€{priceWithVariant.toFixed(2)}</span> {/* Usar precio con variante */}
              <span className="ml-2 text-base text-gray-500 line-through">€{product.precio.toFixed(2)}</span>
              {discountPercentage != null && ( // Mostrar porcentaje solo si hay descuento y se calculó
                <span className="ml-2 bg-[#ff6b6b] text-white text-sm font-medium px-2 py-0.5 rounded">-{discountPercentage}%</span>
              )}
            </div>
          ) : (
            <span className="text-2xl font-semibold text-[#0084cc]">€{priceWithVariant.toFixed(2)}</span> {/* Usar precio con variante */}
          )}
        </div>

        {/* Description */}
        <div className="mb-6 text-gray-700">
          <p>{product.descripcion_larga || product.descripcion}</p>
        </div>

        {/* Variants (Interactive) */}
        {product.variantes_producto && product.variantes_producto.length > 0 && ( // Solo mostrar si hay variantes
           <div className="mb-6">
              {Object.entries(variantsByType).map(([type, variants]) => (
                 <div key={type} className="mb-4">
                    <h4 className="font-medium mb-2 capitalize">{type}:</h4> {/* Capitalize type */} 
                    {/* Botones o Select para seleccionar variantes */} 
                    <div className="flex flex-wrap gap-2">
                       {variants.map(variant => (
                          <Button
                             key={variant.id}
                             variant={selectedVariants[type] === variant.id ? 'default' : 'outline'}
                             size="sm"
                             onClick={() => handleVariantSelect(type, variant.id)}
                             className={selectedVariants[type] === variant.id ? 'bg-[#0084cc] hover:bg-[#007acc] text-white' : ''} // Apply active class
                             disabled={!variant.activo || variant.stock === 0} // Disable if variant is inactive or out of stock
                          >
                             {variant.valor} {(!variant.activo || variant.stock === 0) && '(Agotado)'} {/* Indicate if out of stock/inactive */} 
                          </Button>
                       ))}
                    </div>
                 </div>
              ))}
           </div>
        )}

        {/* Quantity Selector and Add to Cart (Interactive) */}
        {product.stock > 0 ? (
           <div className="flex items-center space-x-4 mb-6">
             <div className="flex items-center border border-gray-300 rounded-md">
                {/* Select de cantidad */} 
                {/* Ajustamos el rango del select para no exceder el stock ni 10 */} 
                {/* También consideramos el stock de la variante seleccionada si aplica */} 
                {/* Simplificación: Usaremos el stock del producto principal por ahora, la lógica de stock por variante es más compleja */} 
                <select value={quantity} onChange={handleQuantityChange} className="appearance-none bg-white py-2 px-3 text-sm focus:outline-none">
                  {[...Array(Math.min(product.stock, 10))].map((_, i) => (
                     <option key={i + 1} value={i + 1}>{i + 1}</option>
                  ))}
                </select>
             </div>
              {/* Botón Añadir al Carrito */} 
             <Button size="lg" className="bg-[#0084cc] hover:bg-[#007acc]" onClick={handleAddToCart} disabled={product.stock === 0}>
               <ShoppingCart className="h-5 w-5 mr-2" />
               Añadir al Carrito
             </Button>
           </div>
        ) : (
            <div className="text-red-600 font-semibold mb-6">Sin stock</div>
        )}


        {/* Add to Favorites (Interactive with auth check) */}
        <div className="mb-6">
           {/* Botón o icono de favoritos */} 
          <Button
             variant="outline"
             className={
                isFavorited
                   ? "w-full border-[#ff6b6b] bg-[#ff6b6b] text-white hover:bg-[#e05a5a] hover:border-[#e05a6a]"
                   : "w-full border-[#ff6b6b] text-[#ff6b6b] hover:bg-[#ff6b6b] hover:text-white"
             }
             onClick={handleAddToFavorites}
             disabled={isLoadingAuth || isTogglingFavorite} // Deshabilitar si carga auth o toggling favorito
          >
            {/* Cambiar icono de corazón si es favorito. Usar fill si isFavorited es true. */}
            <Heart className={`h-5 w-5 mr-2 ${isFavorited ? 'fill-current' : ''}`} />
            {isTogglingFavorite ? (isFavorited ? 'Eliminando...' : 'Añadiendo...') : (isFavorited ? 'En Favoritos' : 'Añadir a Favoritos')}
          </Button>
        </div>

        {/* Tabs for Details, Reviews, etc. */}
         <Tabs defaultValue="description" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
               <TabsTrigger value="description">Detalles</TabsTrigger>
               <TabsTrigger value="reviews">Reseñas</TabsTrigger>
            </TabsList>
            <TabsContent value="description" className="pt-4 text-gray-700">
               <h3 className="font-semibold mb-2">Descripción Larga</h3>
               <p>{product.descripcion_larga || product.descripcion}</p>
                {/* Podrías añadir más detalles técnicos o metadata aquí */}
            </TabsContent>
            <TabsContent value="reviews" className="pt-4">
               <h3 className="font-semibold mb-4">Reseñas de Clientes</h3>
                {/* Listar reseñas individuales si hay */}
                 {reviews && reviews.length > 0 ? (
                    <div className="space-y-4">
                       {reviews.map(review => (
                          <div key={review.id} className="border-b pb-4 last:border-b-0">
                             <div className="flex items-center mb-1">
                                {/* Nombre de usuario - requeriría unir la tabla perfiles_usuario */}
                                <span className="font-semibold mr-2">Usuario</span> 
                                 {renderStars(review.valoracion)}
                             </div>
                             <h4 className="font-medium mb-1">{review.titulo}</h4>
                             <p className="text-sm text-gray-700">{review.contenido}</p>
                             <div className="text-xs text-gray-500 mt-2">{new Date(review.created_at).toLocaleDateString()}</div>
                          </div>
                       ))}
                    </div>
                 ) : (
                    <p>No hay reseñas todavía.</p>
                 )}
                 {/* Formulario para dejar reseña (condicional a compra/login) - No implementado en este paso */}
            </TabsContent>


         </Tabs>


      </div>
    </div>
  );
}
